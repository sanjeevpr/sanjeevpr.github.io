<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Just Another Blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 21 Oct 2021 00:13:00 +0530</pubDate>
    <lastBuildDate>Thu, 21 Oct 2021 00:13:00 +0530</lastBuildDate>
    <generator>Jekyll v4.0.1</generator>
    
      <item>
        <title>Calm Down</title>
        <description>&lt;p&gt;Though, it feels like we are happier close to our families in the lockdown, but, it is hardly the case. The lockdown is testing the people in the most challenging way. Suddenly, we are bound inside a house, and all our ties are broken. The world outside now seems extremely important. The chaos in the house, work, and other things are becoming a little too much sometimes.
I am here to suggest a few techniques and tips in which you can help find peace and calm in chaos.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is not an exhaustive list.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;meditation&quot;&gt;Meditation&lt;/h2&gt;
&lt;p&gt;I cannot stress enough about the importance of meditation in our mental and physical well-being. The benefits are numerous. You can practice meditation for at least 5-10 minutes a day if you are a beginner, and gradually increase the time as you become accustomed. It will help you to find peace.&lt;/p&gt;

&lt;h2 id=&quot;breathingprayanama&quot;&gt;Breathing/Prayanama&lt;/h2&gt;
&lt;p&gt;It is the practice in which you focus on your breath. There are at least five Prayanam exercises or practices. You can follow the flow of your ever-present to calm yourself down.&lt;/p&gt;

&lt;h2 id=&quot;exercise-or-yoga&quot;&gt;Exercise or yoga&lt;/h2&gt;
&lt;p&gt;If you are active and you move your body, that is a win for you. Be active, move, don’t sit for too long, take frequent breaks, etc are a few things you can do. In addition, do workouts or yoga at least once a day. Keep the blood flowing.&lt;/p&gt;

&lt;h2 id=&quot;shutting-down-work&quot;&gt;Shutting down work&lt;/h2&gt;
&lt;p&gt;Shutting down your work on time and not working after-hours looks easier said than done. People feel that since everyone is home, they can work anytime. Try to go offline by turning off all the notifications from mail and other apps. Set a boundary yourself, if you cannot ask others. Try to find a set time and place for your work during which you are not disturbed.&lt;/p&gt;

&lt;h2 id=&quot;stay-away-from-negativity&quot;&gt;Stay away from negativity&lt;/h2&gt;
&lt;p&gt;If you are suddenly feeling threatened and you are in constant fear, please stop consuming non-sense that is served so conveniently through various media and social media. Stay away from negative people. Treat your mind as a temple and fill it with positivity. Follow good people on social media, and don’t watch too much news. I have quit social media for almost a year now.&lt;/p&gt;

&lt;h2 id=&quot;you-are-what-you-eat&quot;&gt;You are what you eat&lt;/h2&gt;
&lt;p&gt;Eat good healthy food. Stay away from packaged and junk food. You also don’t need to go super healthy and start eating super-foods. Don’t complicate things. The simple meal that you have been eating at home will work and doesn’t burn your pockets as well.&lt;/p&gt;

&lt;p&gt;Mental wellbeing is often ignored. But, can change that by apply these things to your life.&lt;/p&gt;

</description>
        <pubDate>Sun, 12 Jul 2020 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2020/calm-down/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/calm-down/</guid>
        
        
      </item>
    
      <item>
        <title>Difference between Java's ArrayList set and add Methods</title>
        <description>&lt;p&gt;There are many methods in the &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.ArrayList&lt;/code&gt; class in Java. But, two of the overloaded methods &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; at index, are quite interesting. I am writing this post just to tell you a small gotcha of the methods.&lt;/p&gt;

&lt;h2 id=&quot;arraylist-class&quot;&gt;ArrayList Class&lt;/h2&gt;
&lt;p&gt;The ArrayList as the name suggests is an array but with dynamic size. A static array needs to be declared and initialized with a fixed int size that cannot change. But we don’t need to specify the size of the ArrayList and it can grow dynamically as we add elements to it.&lt;/p&gt;

&lt;h3 id=&quot;there-a-two-add-methods&quot;&gt;There a two add methods&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;adde-e&quot;&gt;add(E e)&lt;/h4&gt;
    &lt;p&gt;This basically adds the element to the ArrayList. Since the ArrayList is dynamic, it automatically increases the size of the ArrayList by 1, and adds the new element to the index.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;addint-index-e-e&quot;&gt;add(int index, E e)&lt;/h4&gt;
    &lt;p&gt;This is a little confusing because it shifts all the elements after the element has been added to the specified index. Let’s say, you have an ArrayList with elements &lt;code class=&quot;highlighter-rouge&quot;&gt;[1, 2, 3, 4]&lt;/code&gt; and the size is 4. If you try to add a new element 10 to index 2 where we have element 3 already, it won’t replace element 3 with 10, but rather it will add 10 at index 2, and shifts all the remaining elements from 3 onwards to the right of the ArrayList. So, the resulting Arraylist looks something like this:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[1, 2, 10, 3, 4]&lt;/code&gt; and the size becomes 5&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;setint-index-e-e&quot;&gt;set(int index, E e)&lt;/h4&gt;
    &lt;p&gt;As the name suggests, the set replaces the existing element in the index with the element that you want to add. So, for the ArrayList &lt;code class=&quot;highlighter-rouge&quot;&gt;[1, 2, 3, 4]&lt;/code&gt; with size 4 after &lt;code class=&quot;highlighter-rouge&quot;&gt;set(2, 10)&lt;/code&gt; becomes
&lt;code class=&quot;highlighter-rouge&quot;&gt;[1, 2, 10, 4]&lt;/code&gt; and the size remains 4&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 01 Jul 2020 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2020/difference-between-java-arraylist-set-and-add-methods/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/difference-between-java-arraylist-set-and-add-methods/</guid>
        
        
      </item>
    
      <item>
        <title>Stack Implementations using Linked List and Array</title>
        <description>&lt;p&gt;The stacks are fundamental data structures. It has many usages from the language compiler, the back button in the web browsers to Undo in a word processor. The stacks use Last In First Out mechanism to insert/add and remove data from it. It can be implemented with either Linked List or Array. We will explore the implementation of stacks using both the data structures and their tradeoffs.&lt;/p&gt;

&lt;h2 id=&quot;operations&quot;&gt;Operations&lt;/h2&gt;
&lt;p&gt;The operation we require are:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt; - pushes an item onto the stack&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pop()&lt;/code&gt; - removes an item from the stack&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isEmpty()&lt;/code&gt; - checks if the stack is empty or not.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;implementation-using-linked-list&quot;&gt;Implementation using Linked List&lt;/h2&gt;
&lt;p&gt;The stack’s implementation using Linked List is quite straight forward. We need to maintain a pointer to the first element of the linked list and we shall insert/remove the elements from the first element. We shall have an inner class Node that this model class/entity for an actual node/item.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The item is the actual data which is a String in this example. You can also have any other type of data that you want. The next variable is used to maintain the link to the next Node of the item. In the case of the last element, the next will always be null.&lt;/p&gt;

&lt;h3 id=&quot;push&quot;&gt;Push&lt;/h3&gt;
&lt;p&gt;Pushing a new element/item will always be from the beginning of the list. For this, we need to save the first element temporarily into oldFirst. Since we are adding a new Node, we need to create a new node and assign it to the first element. The item to be inserted will also go in the item variable of the first. Finally, the previous first element that we save in oldFirst will be pointed by first.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldfirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldfirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pop&quot;&gt;Pop&lt;/h3&gt;
&lt;p&gt;Poping or removing an element/item from the stack is also from the beginning of the list. First, we save the item to be removed which will be returned at the last. The first node now points to the node which was its next node. The element/item is then returned.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
       &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;implementation-using-array&quot;&gt;Implementation using Array&lt;/h2&gt;
&lt;p&gt;The arrays implementation uses an array S to store N items. We push items to the array at &lt;code class=&quot;highlighter-rouge&quot;&gt;S[N]&lt;/code&gt; position and pop an item from &lt;code class=&quot;highlighter-rouge&quot;&gt;S[N-1]&lt;/code&gt; position. We can handle the underflow of an array by throwing an exception when a pop operation is done on an empty array and overflow by resizing the array when we have crossed the size of the array. We can also add null items so that on the pop operation we can free the space.&lt;/p&gt;

&lt;h3 id=&quot;strategies-to-grow-and-shrink-the-array&quot;&gt;Strategies to Grow and Shrink the Array&lt;/h3&gt;
&lt;p&gt;We can always ask the client who will be using the Stack API to provide the size which is not a good idea because a client should not be caring about all that. We can increase or decrease the size of the array on push and pop, but this will also be very expensive. Think of a scenario where we are doing push-pop-push-pop-push. Here the strategy of increase or decrease the size by 1 will be very expensive. Hence we need to ensure that the array resizing happens as infrequent as possible.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;When the array becomes full, we can create an array double the size of the array and copy all the items to it.&lt;/li&gt;
  &lt;li&gt;Similarly, we can also halve the size of the array when it is quarter full. 
The question obviously will be why not halve the size of an array when it is half full, why quarter full? Consider the same scenario above of push-pop-push-pop-push … when the array is full and each operation takes time proportional to N which can be too expensive.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sanjeevpr/sanjeevpr.github.io/main/assets/images/Algo.png&quot; alt=&quot;Array&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;resizing&quot;&gt;Resizing&lt;/h3&gt;
&lt;p&gt;We can create an array of size 1.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For, resizing the array we shall have a method which does what we have discussed above:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
       &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; 
       &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; 
             &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;push-1&quot;&gt;Push&lt;/h3&gt;
&lt;p&gt;When the size of the array is full, we will resize the array to twice its size and add the array in Nth position.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
               &lt;span class=&quot;n&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pop-1&quot;&gt;Pop&lt;/h3&gt;
&lt;p&gt;We pop the item from the N-1 position of the array and resize the array to half if the size is 1/4th or quarter of the array size.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
         &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[--&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; 
         &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tradeoffs-between-both-the-approaches&quot;&gt;Tradeoffs between both the approaches&lt;/h3&gt;
&lt;p&gt;In the linked list implementation, every operation takes constant time in the worst case. It uses extra time and space to deal with the links between the nodes. While in cases of the array implementation, it takes around constant amortized time and there is also less wasted space. So you can choose whichever you like.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sanjeevpr/data-structures/blob/main/Stack/ArrayStack.java&quot;&gt;https://github.com/sanjeevpr/data-structures/blob/main/Stack/ArrayStack.java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sanjeevpr/data-structures/blob/main/Stack/LinkedListStack.java&quot;&gt;https://github.com/sanjeevpr/data-structures/blob/main/Stack/LinkedListStack.java&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 29 May 2020 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2020/stack-implementation-using-linked-list-and-array/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/stack-implementation-using-linked-list-and-array/</guid>
        
        
      </item>
    
      <item>
        <title>var versus let Keyword</title>
        <description>&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; keyword can get very confusing and may lead to unexpected behaviors in an application and may also lead to some silly bugs. I will explain what is both and when to use one.&lt;/p&gt;

&lt;p&gt;Take a look at the code below,&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Final value of i : &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What is the expected output? I know, you might well say this code prints undefined in the last line. I also thought so. But no. The output of the following code is:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Final&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is a simple explanation for it. A variable declared with the &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; keyword is accessible to the whole function in which it is declared rather than just the block. In the code above, although the variable i is declared inside the for loop, it is available outside it also as the for loop itself is inside the function do(). This is called variable hoisting in JS. In other programming languages such as Java or C++ etc, this code will throw a compile-time error immediately. We need to be very careful with the usage of the &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;The code is written with &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; keyword,&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Final value of i&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; declared with the &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; keyword behaves properly in the case above. It will throw an error in 
&lt;code class=&quot;highlighter-rouge&quot;&gt;console.log(&quot;Final value of i&quot; + i);&lt;/code&gt;
line if we compile this code with TypeScript.&lt;/p&gt;

&lt;p&gt;My thoughts with the usage of both should be known first. We should use the &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; keyword in most of our variable declarations. The &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; keyword can be used in the scenarios where you want the variable to access inside the whole function.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 May 2020 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2020/var-versus-let-keyword/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/var-versus-let-keyword/</guid>
        
        
      </item>
    
      <item>
        <title>What Does gc_deletes Do?</title>
        <description>&lt;p&gt;In Elasticsearch, we usually index, update and delete documents quiet frequently. But there are few caveats or catches that you need to look out for if you do it frequently and within short intervals of time.&lt;/p&gt;

&lt;h2 id=&quot;deletion-of-a-document&quot;&gt;Deletion of a document&lt;/h2&gt;
&lt;p&gt;The deletion of a document also updates the version of the document. For example, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;_version&lt;/code&gt; of the document with the &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt; 1 was 3, after a successful deletion, the &lt;code class=&quot;highlighter-rouge&quot;&gt;_version&lt;/code&gt; will be incremented to 4. When a document is deleted, it is not deleted immediately, it will be temporarily marked as deleted. At this point, the document won’t be searchable. After some amount of time, the Elasticsearch garbage collector collects the documents which are marked as deleted for permanent deletion. If the same document is indexed or updated with the same &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt;, the document will be resurrected and the &lt;code class=&quot;highlighter-rouge&quot;&gt;_version&lt;/code&gt; will be incremented by 1. This is of course not expected at all. This can lead to some unexpected behaviors.&lt;/p&gt;

&lt;h2 id=&quot;gc_deletes-to-the-rescue&quot;&gt;gc_deletes to the rescue&lt;/h2&gt;
&lt;p&gt;The time after which the documents are picked up for permanent deletion by the Elasticsearch garbage collector is set in the _settings field called gc_deletes. This is set to 60 seconds by default during the index creation. This can be changed dynamically, after the index creation also using the following query:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PUT&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;localhost:9200/myindex/_settings?pretty&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Content-Type: application/json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;  
{  
    &quot;index&quot; : {  
        &quot;gc_deletes&quot; : 0  
    }  
}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Setting it to 0 or 0 sec instructs Elasticsearch GC to immediately pick-up the documents which are marked as deleted. Hence, the subsequent index operation using the same id will be a new document with &lt;code class=&quot;highlighter-rouge&quot;&gt;_version 1&lt;/code&gt;. You can check the new value in using the _settings API&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;localhost:9200/myindex/_settings?pretty&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/blog/versioning&quot;&gt;https://www.elastic.co/blog/versioning&lt;/a&gt;
&lt;a href=&quot;https://github.com/elastic/elasticsearch/issues/2166]&quot;&gt;https://github.com/elastic/elasticsearch/issues/2166&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Apr 2020 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2020/what-does-gc-deletes-do/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/what-does-gc-deletes-do/</guid>
        
        
      </item>
    
      <item>
        <title>Things To Do During Quarantine</title>
        <description>&lt;p&gt;The lockdown is not a good place to be in for anyone (* introverts laughing ). We can sleep all day or binge-watch our favorite show on Netflix or play PubG the whole day. The options are many. But ask yourself a question. Will it help you in any way? Are you being productive? What about the extra flat that you always wanted to shed and flaunt your beach body? Or, what about the piano that you always wanted to learn? I have jotted down a few things that you can do to make most of your free time.&lt;/p&gt;

&lt;h2 id=&quot;1-learn-a-new-language&quot;&gt;1. Learn a new language&lt;/h2&gt;
&lt;p&gt;Though thinking of speaking fluent Japanese or Spanish seems mouth-watering but thinking to learn it is not. But this the time where you can take a Udemy course and learning it. You have all day to practice and clear the basics. To make it legit, you can take certification exams which can help you in your career.&lt;/p&gt;

&lt;h2 id=&quot;2-learn-to-code-or-learn-a-new-technology&quot;&gt;2. Learn to code or learn a new technology&lt;/h2&gt;
&lt;p&gt;If you want to switch careers or you are a student, learning to code can always pay you dividends.  There is plenty of free stuff out there like freeCodeCamp and many others which can help you to learn how to code. The professionals who want to upgrade their skills can also use this time to learn new technologies and upgrade their skills. BTW, this is my personal favorite.&lt;/p&gt;

&lt;h2 id=&quot;3-prepare-for-job-interviews&quot;&gt;3. Prepare for job interviews&lt;/h2&gt;
&lt;p&gt;Since you have plenty of time at your disposal, you can prepare for job interviews to land your dream job. Start by updating your resume or CV and updating your online job profiles. Prepare well and land your dream job.&lt;/p&gt;

&lt;h2 id=&quot;4-get-back-to-shape&quot;&gt;4. Get back to shape&lt;/h2&gt;
&lt;p&gt;If you are like me with a big belly and you are always jealous of looking at others who are fit and confident, then we need to have a talk. Start by simple work out routines at your home. You can do yoga, meditation or intense workouts like Tabata or HIIT. I am personally following Tabata 5 min workout and I do yoga and Pranayam every morning. Also, keep yourself hydrated and eat healthily.&lt;/p&gt;

&lt;h2 id=&quot;5-read-books&quot;&gt;5. Read books&lt;/h2&gt;
&lt;p&gt;If you are a book worm, then you can skip this tip. But if you are like me for whom the reading book is the last thing that you wanna do, you should at least give it a try. I have started reading books and very soon realized the power it possesses. If your brain is a sword then you need books to sharpen it. Its never too late to start. Don’t miss out on this wonderful thing.&lt;/p&gt;

&lt;h2 id=&quot;6-start-a-blog-or-a-channel&quot;&gt;6. Start a blog or a channel&lt;/h2&gt;
&lt;p&gt;I am not a very good writer but I have started a blog and started to share what I know. Similarly, you can also start it. Share what you know or what you are good at. Don’t do it for appreciation, but for your own satisfaction. You can also start a YouTube channel.&lt;/p&gt;

&lt;p&gt;You can think and apply your own as well. But, this gives you an idea to get started. Happy quarantine :)&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Apr 2020 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2020/things-to-during-quarantine/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/things-to-during-quarantine/</guid>
        
        
      </item>
    
      <item>
        <title>Welcome</title>
        <description>&lt;p&gt;Today marks a great day for me because I have created this blog. I am have started blogging because I hope that this becomes a great place to for me express my ideas which never sees the light of the day. I don’t want it to be super-complicated, messy, or professional, but simple and elegant. I will mostly be writing about things from technology to life experiences, and things I think that might help others.&lt;/p&gt;

&lt;h2 id=&quot;a-quick-intro-about-myself&quot;&gt;A quick intro about myself:&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;I am a software developer&lt;/li&gt;
  &lt;li&gt;Have around three years of experience&lt;/li&gt;
  &lt;li&gt;I am based in India&lt;/li&gt;
  &lt;li&gt;I am 27 y/o&lt;/li&gt;
  &lt;li&gt;I love solving problems and I am always curious about how things work the way they work&lt;/li&gt;
  &lt;li&gt;I love traveling, cooking, playing ukulele and guitar, and jam with my loved ones.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 20 Jan 2020 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2020/welcome/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/welcome/</guid>
        
        
      </item>
    
  </channel>
</rss>
